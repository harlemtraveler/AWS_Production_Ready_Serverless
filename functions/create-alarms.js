'use strict';

const _          = require('lodash');
const co         = require('co');
const AWS        = require('aws-sdk');
const apigateway = new AWS.APIGateway();
const cloudwatch = new AWS.CloudWatch();
const log        = require('../lib/log');

const alarmActions = (process.env.alarm_actions || '').split(',');
const okAction     = (process.env.ok_actions || '').split(',');

// Here, we enable detail Metrics...where we get the Stage
let enableDetailedMetrics = co.wrap(function* (restApiId, stageName) {
  let getResp = yield apigateway.getStage({ restApiId, stageName }).promise();
  log.debug('get stage settings', getResp.methodSettings);

  // Check if Detailed Metrics is already enabled
  let isDetailedMetricsEnabled = _.get(getResp, 'methodSettings.*/*.metricsEnabled', false);
  // If Detailed Metrics are NOT already enabled, we issue an "update stage" request to enable the option
  if (isDetailedMetricsEnabled) {
    log.debug('detailed metrics already enabled', { restApiId, stageName });
  } else {
    let updateReq = {
      restApiId,
      stageName,
      patchOperations: [
        {
          path: "/*/*/metrics/enabled",
          value: "true",
          op: "replace"
        }
      ]
    };
    yield apigateway.updateStage(updateReq).promise();
    log.debug('enabled detailed metrics', { restApiId, stageName });
  }
});

// Fetch all the Endpoints for the API
let getRestEndpoints = co.wrap(function* (restApiId) {
  let resp = yield apigateway.getResources({ restApiId }).promise();
  log.debug('got REST resources', { restApiId });

  // Gets all the Resources & Methods for the API
  let resourceMethods = resp.items.map(x => {
    let methods = _.keys(x.resourceMethods);
    return methods.map(method => ({ resource: x.path, method }));
  });

  return _.flattenDeep(resourceMethods);
});

let getRestApiName = co.wrap(function* (restApiId) {
  let resp = yield apigateway.getRestApi({ restApiId }).promise();
  log.debug('got REST api', { restApiId });

  return resp.name;
});

// Get the API, get the API's endpoints, iterate & create alarms for each endpoint
let createAlarmsForEndpoints = co.wrap(function* (restApiId, stageName) {
  let apiName = yield getRestApiName(restApiId);
  log.debug(`API name is ${apiName}`, { restApiId, stageName });

  let restEndpoints = yield getRestEndpoints(restApiId);
  log.debug('got REST endpoints', { restApiId, stageName, restEndpoints });

  for (let endpoint of restEndpoints) {
    // We create a new CloudWatch Alarm for each endpoint...-->
    // for when the API-Gateway's "Latency" metric for when a particular...-->
    // endpoint exceeds 1 second, on the 99 percentile per minute, for 5 minutes in a row.
    // IF TRUE => this will trigger the "alarmActions".
    // The "alarmActions" && "ok_actions" are both configured/passed via Environment Variables
    let putReq = {
      AlarmName: `API [${apiName}] stage [${stageName}] ${endpoint.method} ${endpoint.resource} : p99 > 1s`,
      MetricName: 'Latency',
      Dimensions: [
        { Name: 'ApiName',  Value: apiName },
        { Name: 'Resource', Value: endpoint.resource },
        { Name: 'Method',   Value: endpoint.method },
        { Name: 'Stage',    Value: stageName }
      ],
      Namespace: 'AWS/ApiGateway',
      Threshold: 1000,      // 1s
      ComparisonOperator: 'GreaterThanThreshold',      
      Period: 60,           // per min
      EvaluationPeriods: 5, 
      DatapointsToAlarm: 5, // 5 consecutive mins to trigger alarm
      ExtendedStatistic: 'p99',
      ActionsEnabled: true,
      AlarmActions: alarmActions,
      AlarmDescription: `auto-generated by Lambda [${process.env.AWS_LAMBDA_FUNCTION_NAME}]`,
      OKActions: okAction,
      Unit: 'Milliseconds'
    };
    yield cloudwatch.putMetricAlarm(putReq).promise();
  }

  log.debug('auto-created latency ALARMS for REST endpoints', { restApiId, stageName, restEndpoints });
});

module.exports.handler = co.wrap(function* (event, context, cb) {
  let restApiId = event.detail.requestParameters.restApiId;
  let stageName = event.detail.requestParameters.createDeploymentInput.stageName;

  yield enableDetailedMetrics(restApiId, stageName);

  yield createAlarmsForEndpoints(restApiId, stageName);

  cb(null, 'ok');
});